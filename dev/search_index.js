var documenterSearchIndex = {"docs":
[{"location":"library/","page":"Library","title":"Library","text":"Modules = [VSFlow]","category":"page"},{"location":"library/#VSFlow.Profile","page":"Library","title":"VSFlow.Profile","text":"PROFILE object\n\n\n\n\n\n","category":"type"},{"location":"library/#VSFlow.Profile-Tuple{Any, Function, Any, Any, Any, Any, Any, Any, Any, Any, Any, Vararg{Any, N} where N}","page":"Library","title":"VSFlow.Profile","text":"Constructor Profile(profile, N, position, args...)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.backwarddifference-Tuple{Any, Any, Any}","page":"Library","title":"VSFlow.backwarddifference","text":"backwarddifference(x, old_x, dt)\n\nCompute the backward difference of nth order according to the length of old_x.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.centereddifference-Tuple{Any, Any}","page":"Library","title":"VSFlow.centereddifference","text":"centereddifference(neighbours, dx)\n\nCentered differences. Order depends on length of neighbours.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.checkangle-Tuple{Any}","page":"Library","title":"VSFlow.checkangle","text":"checkangle(θ)\n\nAssert the continuity of panel angles by subtracting 2π if necessary.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.circularmotion-Tuple{Any, Any, Any}","page":"Library","title":"VSFlow.circularmotion","text":"circularmotion(t, R, strouhal)\n\nReturn the vector [x, ẋ, ẍ] corresponding to a circular motion of radius R where x = [X, Y, α].\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.correctvelocity-NTuple{10, Any}","page":"Library","title":"VSFlow.correctvelocity","text":"correctvelocity(xm, ym, xb, yb, xt, yt, ub, vb, ut, vt)\n\nCompute the angular velocity (ratio between angular impulse and scalar inertia moment). Integrals computed with bi-linear assumption on quadrilaterals, and 25-point Gauss quadrature.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.cubicspline-Tuple{Any, Any, Any}","page":"Library","title":"VSFlow.cubicspline","text":"cubicspline(z, X, U)\n\nComputes the cubic spline at point z ∈ [0, 1], build from interpolation of points (X, U) as well as its derivative.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.customfourthorder-Tuple{Any, Any, Any}","page":"Library","title":"VSFlow.customfourthorder","text":"customfourthorder(x, old_x, dt)\n\nCompute the 4th order time derivative at t using \tt-1/2 \tt-3/2 \tt-5/2 \tt-7/2.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.dipolecombgenerator","page":"Library","title":"VSFlow.dipolecombgenerator","text":"dipolecombgenerator(rng::MersenneTwister, T, δ, threshold=1e-2)\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.gausslegendretriangle-Tuple{Any, Any, Any}","page":"Library","title":"VSFlow.gausslegendretriangle","text":"gausslegendretriangle(f, fx, fy)\n\nComputes the integral of function f(x,y) on the standard triangle abc: a (0; 0) b (1; 0) c (0; 1) using 25 points per dimension. fx, fy are the mapping from the standard triangle to the real one. Coefficients are extracted from Rathod et al (2004) \"Gauss Legendre quadrature over a triangle\"\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.genprofile-Tuple{Function, Int64, Any, Array, Vararg{Any, N} where N}","page":"Library","title":"VSFlow.genprofile","text":"genprofile(profile, N, position, args...)\n\nGenerate a profile with a wedged trailing edge.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getbodycentroid-Tuple{VSFlow.LinearPanel, Any, Any}","page":"Library","title":"VSFlow.getbodycentroid","text":"function getbodycentroid(p::LinearPanel, X0, Y0) \treturns the contribution of panel \"p\" on the position of the \tcentroid of the body with respect to position \"X0, Y0\", \tmultiplied by the body volume.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getbodymass-Tuple{Any, Any, Any}","page":"Library","title":"VSFlow.getbodymass","text":"getbodymass(XYm, XYt, XYb)\n\nIntegrate the constant and uniform unit density on the body. Integral computed with 25-point Gauss quadrature.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getbodymomentofinertia-Tuple{VSFlow.LinearPanel, Any, Any}","page":"Library","title":"VSFlow.getbodymomentofinertia","text":"function getbodymomentofinertia(p::LinearPanel, X0, Y0) \treturns the contribution of panel \"p\" on the moment of inertia of \tthe body.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getbodyvolume-Tuple{VSFlow.LinearPanel, Any, Any}","page":"Library","title":"VSFlow.getbodyvolume","text":"function getbodyvolume(p::LinearPanel, X0, Y0) \treturns the contribution of panel \"p\" on the body volume.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getboundpanelsinducedvel-Tuple{VSFlow.Profile, Any, Any}","page":"Library","title":"VSFlow.getboundpanelsinducedvel","text":"getboundpanelsinducedvel(profile, X, Y)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getboundpotential","page":"Library","title":"VSFlow.getboundpotential","text":"getboundpotential(p::Profile, nn=20) \tIntegrates the velocity on the profile to obtain the potential. \tIntegrating on a path from upstream is required to get the exact \tpressure. If the goal is to get the loads, then the upstream \tintegration is unnecessary.\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.getcenterofmass-NTuple{6, Any}","page":"Library","title":"VSFlow.getcenterofmass","text":"getcenterofmass(xm, ym, xb, yb, xt, yt)\n\nCompute the center of mass of the body. Integrals computed with 25-point Gauss quadrature.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getcenterofmassvelocity-NTuple{10, Any}","page":"Library","title":"VSFlow.getcenterofmassvelocity","text":"getcenterofmassvelocity(xm, ym, xb, yb, xt, yt, ub, vb, ut, vt)\n\nCompute the velocity of the center of mass of the body. Integrals computed with bi-linear assumption on quadrilaterals.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getcentroid-Tuple{VSFlow.LinearPanel, Any, Any}","page":"Library","title":"VSFlow.getcentroid","text":"function getcentroid(p::LinearPanel) \treturns the absolute position of the vorticity centroid of the panel.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getcloudvelocities-Tuple{Any, Any}","page":"Library","title":"VSFlow.getcloudvelocities","text":"vortexcloudvelocity \tThis function uses anti-symmetry to obtain the velocities induced by \tthe vortex cloud on itself\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getcoeffimpulse!","page":"Library","title":"VSFlow.getcoeffimpulse!","text":"getcoeffimpulse!()\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.getcoeffpotential!-Tuple{VSFlow.Profile}","page":"Library","title":"VSFlow.getcoeffpotential!","text":"getcoeffpotential!\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getforceerror!-Tuple{VSFlow.Profile, Any, Any}","page":"Library","title":"VSFlow.getforceerror!","text":"getforceerror!(p::Profile, sindex, tindex)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getimpulse","page":"Library","title":"VSFlow.getimpulse","text":"function getimpulse(p::LinearPanel, γ1, γ2) \tCompute the impulse by integrating X^γ and X^X^γ analytically on the linear panel. \tYou can specify if you need to add the integral of X^(n^Vb) where n \tpoints towards the fluid. \tThe integral is performed in the panel frame and the result is then \trotated in the inertial frame of reference. \tInertial frame: X \tPanel frame:   -x + x'\n\nInput:\n\t-p  : the linear panel to integrate on\n\t-γL : vortex strength on the left side of the panel (in its frame)\n\t-γR : vortex strength on the right side of the panel\n\t-ω  : angular velocity in the z direction\n\t-Ut : translational horizontal body velocity\n\t-Vt : translational vertical body velocity\n\t-X0 : position X of origin of the inertial frame\n\t-Y0 : position Y of origin of the inertial frame\n\t-Xp : position X of the center of rotation of the body\n\t-Yp : position Y of the center of rotation of the body\n\t-nc : need body velocity contribution?\n\t-vs : stretching velocity\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.getimpulse-Tuple{VSFlow.Profile}","page":"Library","title":"VSFlow.getimpulse","text":"getimpulse(p::Profile)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getinducedvelocity","page":"Library","title":"VSFlow.getinducedvelocity","text":"function getinducedvelocity(p::LinearPanel, XY, k, γL, γR, ω, Ut, Vt, Xp, Yp, vs)     Computes the velocity due to pane p at location XY     k specifies which integral is required:         0 full integral; vortex         1 full integral; source         2 half-left integral; vortex         3 half-left integral; source         4 half-right integral; vortex         5 half-right integral; source\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.getmonopolesource-Tuple{VSFlow.LinearPanel, Any, Any, Any, Any, Any, Any}","page":"Library","title":"VSFlow.getmonopolesource","text":"function getmonopolesource()     Compute the monopole of source of a linear panel and its location in the reference frame.     If vortex strength crosses the x axis, then the panel is split into to smaller     panels of positive and negative strengths.     In the case it is split, then the id is modified to be able to retrace it later.\n\nInput:\n\t-p  : the linear panel to integrate on\n    -id : the id of the panel\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getmonopolevortex","page":"Library","title":"VSFlow.getmonopolevortex","text":"function getmonopolevortex()     Compute the monopole of vorticity of a linear panel and its location in the reference frame.     If vortex strength crosses the x axis, then the panel is split into to smaller     panels of positive and negative strengths.     In the case it is split, then the id is modified to be able to retrace it later.\n\nInput:\n\t-p  : the linear panel to integrate on\n    -id : the id of the panel\n\t-γL : vortex strength on the left side of the panel (in its frame)\n\t-γR : vortex strength on the right side of the panel\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.getmotionkelvin-Tuple{VSFlow.LinearPanel, Any, Any, Any, Any, Any}","page":"Library","title":"VSFlow.getmotionkelvin","text":"function getmotionkelvin(p::LinearPanel, ω, Ut, Vt, X0, Y0) \tGet the circulation induced by the panel motion.\n\nInput:\n\t-p  : the linear panel to integrate on\n\t-ω  : angular velocity in the z direction\n\t-Ut : translational horizontal body velocity\n\t-Vt : translational vertical body velocity\n\t-X0 : position X of the center of rotation of the body\n\t-Y0 : position Y of the center of rotation of the body\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getmotionparams","page":"Library","title":"VSFlow.getmotionparams","text":"function getmotionparams(p::LinearPanel, X, Y) \tGet the velocity parameters at point X, Y due to the motion of the panel. \tIntegrals are performed in the panel frame of reference then re-cast \tin the inertial frame through a rotation.\n\nInput:\n\t-p  : the linear panel to integrate on\n\t-X  : position X where we want the velocity induced by the body motion\n\t-Y  : position Y where we want the velocity induced by the body motion\n\t-ω  : angular velocity in the z direction\n\t-Ut : translational horizontal body velocity\n\t-Vt : translational vertical body velocity\n\t-X0 : position X of the center of rotation of the body\n\t-Y0 : position Y of the center of rotation of the body\n\t-vs : stretching velocity\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.getnoca!","page":"Library","title":"VSFlow.getnoca!","text":"\n\n\n\n","category":"function"},{"location":"library/#VSFlow.getnormal-Tuple{VSFlow.LinearPanel}","page":"Library","title":"VSFlow.getnormal","text":"function getnormal(p::LinearPanel) \tGet the normal of the panel in its frame of reference \t(inside of the body)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getparams-Tuple{VSFlow.LinearPanel, Any, Any}","page":"Library","title":"VSFlow.getparams","text":"function getparams(p::LinearPanel, X, Y) \tObtain the parameters to multiply with γL, γR in order to get the \tvelocity at point X, Y.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getparamsinrefframe-Tuple{VSFlow.ConstantPanel, Any, Any}","page":"Library","title":"VSFlow.getparamsinrefframe","text":"getparamsinrefframe(panel, X, Y)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getparamsinrefframe-Tuple{VSFlow.LinearPanel, Any, Any}","page":"Library","title":"VSFlow.getparamsinrefframe","text":"getparamsinrefframe(panel, X, Y)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getpotential-Tuple{VSFlow.LinearPanel, Any, Any, Any, Any, Any, Any, Any}","page":"Library","title":"VSFlow.getpotential","text":"function getpotential(p::LinearPanel, γL, γR, ω, Ut, Xp, Yp) \tCompute the potential through the integral of tangent velocity \talong the panel \"p\".\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getpressureforce-Tuple{VSFlow.LinearPanel, Any, Any, Any, Any}","page":"Library","title":"VSFlow.getpressureforce","text":"function getpressureforce(p::LinearPanel)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getprofilelengths-Tuple{VSFlow.Profile}","page":"Library","title":"VSFlow.getprofilelengths","text":"getprofilelengths(p::Profile)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getstate-Tuple{Any, Any}","page":"Library","title":"VSFlow.getstate","text":"getstate(p, n) \tUsed for the gym model\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.gettrailingedgevel!-Tuple{VSFlow.Profile}","page":"Library","title":"VSFlow.gettrailingedgevel!","text":"gettrailingedgevel!(p::Profile)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getvelocitygradient-Tuple{VSFlow.VortexPoint, Any, Any, Any, Any}","page":"Library","title":"VSFlow.getvelocitygradient","text":"getvelocitygradient(vp::VortexPoint, X, Y, θ) \tComputes the gradient of induced velocity at position 'X, Y'     due to a change of position of 'vp'\n\nInput :\n    -vp : sensitive point vortex\n    -X  : X position where velocity is computed\n    -Y  : Y position where velocity is computed\n    -θ  : rotation angle\n    -δ  : Gaussian kernel cut-off width\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.getvorteximpulse-Tuple{VSFlow.Profile, Any}","page":"Library","title":"VSFlow.getvorteximpulse","text":"getvorteximpulse(p, vp)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.get∫fdV-NTuple{4, Any}","page":"Library","title":"VSFlow.get∫fdV","text":"get∫fdV(XY, f)\n\nComputes the integral of f on the triangle created by the set of points XY, Y using a Gauss-Legendre quadrature. f can return a vector.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.get∫fdV-Tuple{VSFlow.LinearPanel, Any, Any}","page":"Library","title":"VSFlow.get∫fdV","text":"function get∫fdV(pa::LinearPanel, XY, f) \tComputes the integral of 'f' on the triangle created by the \tpanel and point XY using a Gauss-Legendre quadrature. \tf can return a vector.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.globalvelocity","page":"Library","title":"VSFlow.globalvelocity","text":"globalvelocity(p::Profile, XY)\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.heavepitch-NTuple{6, Any}","page":"Library","title":"VSFlow.heavepitch","text":"heavepitch(t, h0, αmax, ψ1, ψ2, strouhal)\n\nReturn the vector [x, ẋ, ẍ] corresponding to a heaving & pitching motion where x = [X, Y, α].\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.inbodyframe-Tuple{VSFlow.Profile, Any, Any}","page":"Library","title":"VSFlow.inbodyframe","text":"inbodyframe(p::Profile, X, Y)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.logresults","page":"Library","title":"VSFlow.logresults","text":"logresults(p, is_init, t, mem)\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.logresults2","page":"Library","title":"VSFlow.logresults2","text":"logresults2(p, is_init, t, mem) \tResults for the RL controller\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.lumpvortices!-Tuple{VSFlow.Profile}","page":"Library","title":"VSFlow.lumpvortices!","text":"lumpvortices!(p::Profile)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.motionupdate!-Tuple{VSFlow.Profile, Any, Any, Any}","page":"Library","title":"VSFlow.motionupdate!","text":"motionupdate!(p::Profile, X, Ẋ, t)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.norm2-Tuple","page":"Library","title":"VSFlow.norm2","text":"norm2(x)\n\nSquared norm of x.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.placeconstantpanel!-Tuple{VSFlow.Profile, Any, Any}","page":"Library","title":"VSFlow.placeconstantpanel!","text":"placeconstantpanel!(p::Profile, X2, Y2)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.profilerun","page":"Library","title":"VSFlow.profilerun","text":"\n\n\n\n","category":"function"},{"location":"library/#VSFlow.resetconstantpanel!-Tuple{Any}","page":"Library","title":"VSFlow.resetconstantpanel!","text":"function resetconstantpanel!(p) \tTransform the constant panel into a point vortex. \tThen recompute the vortex strength distribution on the body.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.rotate-Tuple{Any, Any, Any}","page":"Library","title":"VSFlow.rotate","text":"rotate(X, Y, θ)\n\nRotate frame by angle θ in the clockwise direction.\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.setcps!","page":"Library","title":"VSFlow.setcps!","text":"setcps\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.setforcecontrol!-Tuple{VSFlow.Profile, Any, Any, Any}","page":"Library","title":"VSFlow.setforcecontrol!","text":"setforcecontrol!(p::Profile, fx, fy, mz)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.setinitvelocity-Tuple{VSFlow.Profile, Any, Any, Any}","page":"Library","title":"VSFlow.setinitvelocity","text":"setinitvelocity(p::Profile, u, v, α̇)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.setγs!-Tuple{VSFlow.Profile}","page":"Library","title":"VSFlow.setγs!","text":"setγs!(p::Profile)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.step!","page":"Library","title":"VSFlow.step!","text":"step!(p::Profile)\n\n\n\n\n\n","category":"function"},{"location":"library/#VSFlow.transfer!-Tuple{VSFlow.Profile, Any, Any}","page":"Library","title":"VSFlow.transfer!","text":"transfer!(p, sindex, tindex)\n\n\n\n\n\n","category":"method"},{"location":"library/#VSFlow.trapz-Tuple{Any, Any}","page":"Library","title":"VSFlow.trapz","text":"trapz(f, x)\n\nIntegrate function f using trapeze rule.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = VSFlow","category":"page"},{"location":"#VSFlow","page":"Home","title":"VSFlow","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VSFlow.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
